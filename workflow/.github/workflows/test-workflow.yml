name: Workflow Tests

on:
  push:
    branches: [main, develop]
    paths:
      - 'workflow/**'
      - '.github/workflows/test-workflow.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'workflow/**'
  schedule:
    # Run tests every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - e2e
          - load
          - security

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'unit' || github.event.inputs.test_type == ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: workflow/package-lock.json

      - name: Install Node dependencies
        working-directory: ./workflow
        run: |
          npm ci || npm install
          npm install --save-dev jest @types/jest

      - name: Run unit tests
        working-directory: ./workflow
        run: |
          npm test -- --coverage --coverageDirectory=coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./workflow/coverage/lcov.info
          flags: unit
          name: unit-coverage

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results
          path: workflow/coverage/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'integration' || github.event.inputs.test_type == ''

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_n8n
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_n8n
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        working-directory: ./workflow
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-test.txt

      - name: Setup test environment
        working-directory: ./workflow
        run: |
          cp .env.example .env.test
          sed -i 's/your-32-character-encryption-key-here/test-encryption-key-for-ci-testing/' .env.test

      - name: Start test services
        working-directory: ./workflow
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30  # Wait for services to be ready

      - name: Run integration tests
        working-directory: ./workflow
        env:
          WEBHOOK_URL: http://localhost:5679/webhook/google-forms-webhook
          N8N_URL: http://localhost:5679
          FUSIO_URL: http://localhost:8081
          FORM_PASSPHRASE: spse2025
        run: |
          pytest tests/integration/ -v --tb=short --junit-xml=test-results/integration.xml

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: workflow/test-results/

      - name: Cleanup
        if: always()
        working-directory: ./workflow
        run: |
          docker-compose -f docker-compose.test.yml down -v

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'e2e'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        working-directory: ./workflow
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-test.txt
          playwright install chromium

      - name: Setup test environment
        working-directory: ./workflow
        run: |
          cp .env.example .env.test
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Run E2E tests
        working-directory: ./workflow
        run: |
          pytest tests/e2e/ -v --tb=short

      - name: Archive screenshots
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-screenshots
          path: workflow/tests/screenshots/

      - name: Cleanup
        if: always()
        working-directory: ./workflow
        run: |
          docker-compose -f docker-compose.test.yml down -v

  load-tests:
    name: Load Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'load'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup K6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Setup test environment
        working-directory: ./workflow
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Run load tests
        working-directory: ./workflow
        run: |
          k6 run tests/load/k6_script.js --out json=test-results/k6-results.json

      - name: Upload load test results
        uses: actions/upload-artifact@v3
        with:
          name: load-test-results
          path: workflow/test-results/

      - name: Cleanup
        if: always()
        working-directory: ./workflow
        run: |
          docker-compose -f docker-compose.test.yml down -v

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'security' || github.event.inputs.test_type == ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './workflow'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./workflow
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'workflow'
          path: './workflow'
          format: 'HTML'

      - name: Upload dependency check results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports/

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-tests]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate summary report
        run: |
          echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## Test Status" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.unit-tests.result }}" == "success" ]]; then
            echo "| Unit Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Unit Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.integration-tests.result }}" == "success" ]]; then
            echo "| Integration Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Integration Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.security-tests.result }}" == "success" ]]; then
            echo "| Security Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Security Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Unit test coverage report" >> $GITHUB_STEP_SUMMARY
          echo "- Integration test results" >> $GITHUB_STEP_SUMMARY
          echo "- Security scan reports" >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const unitStatus = '${{ needs.unit-tests.result }}' === 'success' ? '✅' : '❌';
            const integrationStatus = '${{ needs.integration-tests.result }}' === 'success' ? '✅' : '❌';
            const securityStatus = '${{ needs.security-tests.result }}' === 'success' ? '✅' : '❌';

            const comment = `## Workflow Test Results

            | Test Type | Status |
            |-----------|--------|
            | Unit Tests | ${unitStatus} |
            | Integration Tests | ${integrationStatus} |
            | Security Tests | ${securityStatus} |

            View detailed results in the [Actions tab](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });